{"version":3,"sources":["Components/SectionTitle/SectionTitle.styles.js","Components/SectionTitle/SectionTitle.jsx","Components/FeedbackOption/FeedbackOption.styles.js","Components/FeedbackOption/FeedbackOption.jsx","Components/Statistic/Statistic.styles.js","Components/Statistic/Statistic.jsx","Components/Notification/Notification.styles.js","Components/Notification/Notification.jsx","App.js","index.js"],"names":["Section","styled","section","Title","h1","SectionTitle","title","children","Button","button","Wrapper","div","FeedbackOption","options","onCounterFeedback","map","name","key","type","onClick","List","ul","Item","li","Statistic","good","neutral","bad","total","positivePercentage","totalFeedback","totalPositive","Text","p","Notification","message","defaultProps","nameArrBtn","App","useState","setGood","setNeutral","setBad","countTotalFeedback","e","target","textContent","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wZAEO,IAAMA,EAAUC,IAAOC,QAAV,KAEPC,EAAQF,IAAOG,GAAV,KCcHC,EAdM,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC7B,OACE,kBAACP,EAAD,KACE,kBAACG,EAAD,KAAQG,GACPC,I,mQCNA,IAAMC,EAASP,IAAOQ,OAAV,KAQNC,EAAUT,IAAOU,IAAV,KCWLC,EAjBQ,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,kBACjC,OACE,kBAACJ,EAAD,KACGG,EAAQE,KAAI,SAACC,GAAD,OACX,kBAACR,EAAD,CAAQS,IAAKD,EAAME,KAAK,SAASC,QAASL,GACvCE,Q,iKCPJ,IAAMI,EAAOnB,IAAOoB,GAAV,KAIJC,EAAOrB,IAAOsB,GAAV,KCoBFC,EAtBG,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBACxCC,EAAgBF,IAChBG,EAAgBF,IACtB,OACE,kBAACT,EAAD,KACE,kBAACE,EAAD,cAAaG,GACb,kBAACH,EAAD,iBAAgBI,GAChB,kBAACJ,EAAD,aAAYK,GACZ,kBAACL,EAAD,eAAcQ,GACd,kBAACR,EAAD,2BAA0BS,EAA1B,Q,8GCXC,IAAMC,EAAO/B,IAAOgC,EAAV,KCEXC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,kBAACH,EAAD,KAAOG,IAOhBD,EAAaE,aAAe,CAC1BD,QAAS,qBAGID,QCVTG,EAAa,CAAC,OAAQ,UAAW,OA4DxBC,MA1Df,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNd,EADM,KACAe,EADA,OAEiBD,mBAAS,GAF1B,mBAENb,EAFM,KAEGe,EAFH,OAGSF,mBAAS,GAHlB,mBAGNZ,EAHM,KAGDe,EAHC,KAKPC,EAAqB,kBAAMlB,EAAOE,EAAMD,GA2B9C,OACE,oCACE,kBAAC,EAAD,CAAcpB,MAAO,yBACnB,kBAAC,EAAD,CACEO,QAASwB,EACTvB,kBAtBsB,SAAC8B,GAE7B,OADeA,EAAEC,OAAOC,aAEtB,IAAK,OACHN,EAAQf,EAAO,GACf,MACF,IAAK,UACHgB,EAAWf,EAAU,GACrB,MACF,IAAK,MACHgB,EAAOf,EAAM,QAgBf,kBAAC,EAAD,CAAcrB,MAAO,aAClBqC,IACC,kBAAC,EAAD,CACElB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOe,EACPd,mBAzC8B,WACtC,IAAMD,EAAQe,IACd,OAAIf,EACKmB,KAAKC,MAAc,IAAPvB,EAAcG,GAE5B,KAuCD,kBAAC,EAAD,CAAcO,QAAS,yBCrDjCc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.d9e521fa.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Section = styled.section``;\r\n\r\nexport const Title = styled.h1``;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Section, Title } from \"./SectionTitle.styles\";\n\nconst SectionTitle = ({ title, children }) => {\n  return (\n    <Section>\n      <Title>{title}</Title>\n      {children}\n    </Section>\n  );\n};\n\nSectionTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element,\n};\n\nexport default SectionTitle;\n","import styled from \"styled-components\";\n\nexport const Button = styled.button`\n  border-radius: 5px;\n  padding: 10px;\n  margin: 10px;\n  font-weight: 700;\n  font-size: 14px;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Wrapper } from \"./FeedbackOption.styles\";\n\nconst FeedbackOption = ({ options, onCounterFeedback }) => {\n  return (\n    <Wrapper>\n      {options.map((name) => (\n        <Button key={name} type=\"button\" onClick={onCounterFeedback}>\n          {name}\n        </Button>\n      ))}\n    </Wrapper>\n  );\n};\n\nFeedbackOption.propTypes = {\n  options: PropTypes.array.isRequired,\n  onCounterFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOption;\n","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n  list-style: none;\n`;\n\nexport const Item = styled.li``;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { List, Item } from \"./Statistic.styles\";\n\nconst Statistic = ({ good, neutral, bad, total, positivePercentage }) => {\n  const totalFeedback = total();\n  const totalPositive = positivePercentage();\n  return (\n    <List>\n      <Item>Good: {good}</Item>\n      <Item>Neutral: {neutral}</Item>\n      <Item>Bad: {bad}</Item>\n      <Item>Total: {totalFeedback}</Item>\n      <Item>Positive Feedback: {totalPositive} %</Item>\n    </List>\n  );\n};\n\nStatistic.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.func.isRequired,\n  positivePercentage: PropTypes.func.isRequired,\n};\n\nexport default Statistic;\n","import styled from \"styled-components\";\n\nexport const Text = styled.p`\n  font-weight: 700;\n  font-size: 16;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Text } from \"./Notification.styles\";\n\nconst Notification = ({ message }) => {\n  return <Text>{message}</Text>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nNotification.defaultProps = {\n  message: \"No feedback given\",\n};\n\nexport default Notification;\n","import React, { useState } from \"react\";\nimport SectionTitle from \"./Components/SectionTitle/SectionTitle\";\nimport FeedbackOption from \"./Components/FeedbackOption/FeedbackOption\";\nimport Statistic from \"./Components/Statistic/Statistic\";\nimport Notification from \"./Components/Notification/Notification\";\n\nconst nameArrBtn = [\"Good\", \"Neutral\", \"Bad\"];\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const countTotalFeedback = () => good + bad + neutral;\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n    if (total) {\n      return Math.round((good * 100) / total);\n    }\n    return 0;\n  };\n\n  const handleCounterFeedback = (e) => {\n    const target = e.target.textContent;\n    switch (target) {\n      case \"Good\":\n        setGood(good + 1);\n        break;\n      case \"Neutral\":\n        setNeutral(neutral + 1);\n        break;\n      case \"Bad\":\n        setBad(bad + 1);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      <SectionTitle title={\"Please leave feedback\"}>\n        <FeedbackOption\n          options={nameArrBtn}\n          onCounterFeedback={handleCounterFeedback}\n        />\n      </SectionTitle>\n\n      <SectionTitle title={\"Statistic\"}>\n        {countTotalFeedback() ? (\n          <Statistic\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback}\n            positivePercentage={countPositiveFeedbackPercentage}\n          />\n        ) : (\n          <Notification message={\"No feedback given\"} />\n        )}\n      </SectionTitle>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}